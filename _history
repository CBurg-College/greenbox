{"entries":[{"timestamp":1761325921010,"editorVersion":"8.0.17","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":185,"diffs":[[1,"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":154,"diffs":[[1,""]]},{"start1":1,"length1":19078,"diffs":[[1,""]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":114,"length1":111,"diffs":[[1,"        \"microphone\": \"*\"\n"]]},{"start1":231,"length1":31,"diffs":[[1,"    \"additionalFilePaths\": []\n"]]}]}]},{"timestamp":1761326516925,"editorVersion":"8.0.17","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":3062,"length1":0,"diffs":[[1,"            let startTime: number = 0\n            let endTime: number = 0\n"]]},{"start1":3502,"length1":0,"diffs":[[1,"            startTime = input.runningTimeMicros()\n\n"]]},{"start1":4033,"length1":0,"diffs":[[1,"basic.showNumber(0)\n"]]},{"start1":4150,"length1":124,"diffs":[[1,"                    if (!this.waitPin(0, 100)) return this.th\n                    if (!this.waitPin(1, 100)) return this.th\n"]]},{"start1":4510,"length1":0,"diffs":[[1,"basic.showNumber(1)\n                endTime = input.runningTimeMicros()\n"]]},{"start1":4856,"length1":1,"diffs":[[1,"basic.showNumber(2)\n"]]}]}]},{"timestamp":1761326998704,"editorVersion":"8.0.17","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":4005,"length1":124,"diffs":[[1,"                    if (!this.waitPin(0, 200)) return this.th\n                    if (!this.waitPin(1, 200)) return this.th\n"]]},{"start1":18839,"length1":67,"diffs":[[1,""]]},{"start1":18866,"length1":91,"diffs":[[1,""]]},{"start1":18997,"length1":2,"diffs":[[1,""]]}]}]},{"timestamp":1761327568274,"editorVersion":"8.0.17","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":13239,"length1":58,"diffs":[[1,"    let TEMPERATURE = DHT22.create(DigitalPin.P14)\n"]]},{"start1":18906,"length1":15,"diffs":[[1,""]]},{"start1":18933,"length1":76,"diffs":[[1,"    th = TH.read()\n"]]},{"start1":18993,"length1":3,"diffs":[[1,""]]},{"start1":18994,"length1":0,"diffs":[[1,"/*\n"]]},{"start1":19093,"length1":0,"diffs":[[1,"    basic.showIcon(IconNames.Confused)\n"]]},{"start1":19155,"length1":0,"diffs":[[1,"*/"]]}]}]},{"timestamp":1761328136701,"editorVersion":"8.0.17","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":3533,"length1":38,"diffs":[[1,"            basic.pause(18)\n"]]},{"start1":18846,"length1":0,"diffs":[[1,"let TH = DHT22.create(DigitalPin.P14)\n"]]},{"start1":18913,"length1":0,"diffs":[[1,"/*\nlet cnt = 0\n"]]},{"start1":18955,"length1":0,"diffs":[[1,"    cnt += 1\n    basic.showNumber(cnt)\n    th = GreenBox.TEMPERATURE.read()\n    basic.showNumber(th[Temperature])\n})\n*/\n\nbasic.forever(function() {\n"]]},{"start1":19126,"length1":59,"diffs":[[1,""]]},{"start1":19172,"length1":1,"diffs":[[1,"    General.wait(5)\n"]]}]}]},{"timestamp":1761328732621,"editorVersion":"8.0.17","changes":[{"type":"edited","filename":"pxt.json","patch":[{"start1":141,"length1":167,"diffs":[[1,"        \"general\": \"github:etmbit/general#4ea1e3f3224a0692900d0a9e2898a515af73c9a0\"\n"]]}]}]},{"timestamp":1761329414610,"editorVersion":"8.0.17","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":19044,"length1":19,"diffs":[[1,""]]}]}]},{"timestamp":1761329416169,"editorVersion":"8.0.17","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":18885,"length1":3,"diffs":[[1,""]]},{"start1":19044,"length1":3,"diffs":[[1,"input.temperature()"]]}]}]},{"timestamp":1761329482424,"editorVersion":"8.0.17","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":13529,"length1":2,"diffs":[[1,""]]}]}]},{"timestamp":1761332194821,"editorVersion":"8.0.17","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":13529,"length1":35,"diffs":[[1,""]]},{"start1":13530,"length1":0,"diffs":[[1,"\n"]]}]}]},{"timestamp":1761332202227,"editorVersion":"8.0.17","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":13529,"length1":68,"diffs":[[1,"basic.forever(function() {\n    \n})\n"]]},{"start1":13565,"length1":518,"diffs":[[1,""]]},{"start1":15390,"length1":0,"diffs":[[1,"    //% block=\"perform a measurement\"\n    //% block.loc.nl=\"voer een meting uit\"\n    export function measure() {\n\n        TEMPHUM = TEMPERATURE.read() // hangs if not the first call of the routine\n\n        let voltL = pins.analogReadPin(PIN_LIGHT)\n        let valueL = pins.map(voltL, 0, 1023, 0, 100)\n        LIGHT = Math.round(valueL)\n\n        // the moisture sensor gives values from 136 to 236\n        // value 136 means fully soaken, 237 means fully dry\n        let voltS = pins.analogReadPin(PIN_SOIL)\n        if (voltS < 300) voltS = 300\n        if (voltS > 750) voltS = 750\n        let valueS = 100 - pins.map(voltS, 300, 750, 0, 100)\n        MOISTURE = Math.round(valueS)\n\n    }\n\n"]]},{"start1":18892,"length1":0,"diffs":[[1,"let th: TemperatureHumidity\n"]]},{"start1":18921,"length1":79,"diffs":[[1,"/*\nbasic.forever(function() {\n    GreenBox.measure()\n    basic.showIcon(IconNames.Confused)\n    General.wait(5)\n    GreenBox.display(Measurement.Temperature)\n\n})\n*/\n"]]}]}]},{"timestamp":1761332778366,"editorVersion":"8.0.17","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":84,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block><block type=\"device_forever\" x=\"225\" y=\"20\"></block></xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":5260,"length1":42,"diffs":[[1,"                    hum = Math.round(hum / 2)\n"]]},{"start1":5390,"length1":44,"diffs":[[1,"                    temp = Math.round(temp / 2)\n"]]},{"start1":18720,"length1":0,"diffs":[[1,"\n///////////////////////////////\n\n\nTiming.onEverySec(5, function() {\n    GreenBox.display(Measurement.Humidity)\n})"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":399,"length1":44,"diffs":[[1,""]]}]},{"type":"added","filename":"test.ts","value":"// tests gaan hier; deze zal niet worden gecompileerd wanneer dit pakket wordt gebruikt als extensie.\n"}]}],"snapshots":[{"timestamp":1761325921009,"editorVersion":"8.0.17","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"greenbox\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}},{"timestamp":1761327730519,"editorVersion":"8.0.17","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block><block type=\"device_forever\" x=\"225\" y=\"20\"></block></xml>","main.ts":"/////////////////////\n//#################//\n//##             ##//\n//##  eradio.ts  ##//\n//##             ##//\n//#################//\n/////////////////////\n\nlet RADIOID = \"ID\"\nlet MSGEND = \"#EOM#\"\nlet bsyids: string[] = []\nlet rdymsgs: string[] = []\nlet bsymsgs: string[] = []\n\ntype readhandler = () => void\nlet readHandler: readhandler\n\nradio.onReceivedString(function (msg: string) {\n    // mbit radio buffer size is 19\n    // msg format:\n    // -----------\n    // char 0 :             id length\n    // char 1..n :          id\n    // char (18 - n)..19 :  msg chunk \n\n    let idlen: number = +msg.substr(0, 1)\n    msg = msg.substr(1)\n    let id = msg.substr(0, idlen)\n    msg = msg.substr(idlen)\n    let ix = 0\n    for (; ix < bsyids.length; ix++) {\n        if (id == bsyids[ix]) break\n    }\n    if (ix == bsyids.length) {\n        bsyids.push(id)\n        bsymsgs.push(\"\") // is handled at the end by 'bsymsgs[ix] += msg'\n    }\n    if (msg == MSGEND) { // end of message\n        rdymsgs.push(bsymsgs[ix])\n        bsymsgs.removeAt(ix)\n        bsyids.removeAt(ix)\n        if (readHandler) readHandler()\n        return\n    }\n    bsymsgs[ix] += msg\n})\n\nnamespace ERadio {\n\n    export function readMessage(): string {\n        let msg = rdymsgs.shift()\n        return msg\n    }\n\n    export function writeMessage(msg: string) {\n        // mbit radio buffer size is 19\n        // chunk format:\n        // -------------\n        // char 0 :             id length\n        // char 1..n :          id\n        // char (18 - n)..19 :  msg chunk \n\n        let idlen = RADIOID.length\n        let chunk: string\n        let chunklen = 18 - idlen // 19 is mbit radio buffer size\n        do {\n            chunk = msg.substr(0, chunklen)\n            msg = msg.substr(chunklen)\n            radio.sendString(idlen.toString() + RADIOID + chunk)\n            basic.pause(1)\n        } while (msg.length > 0)\n        radio.sendString(idlen.toString() + RADIOID + MSGEND)\n    }\n\n    // for senders only\n    export function setId(id: string) {\n        RADIOID = id\n    }\n}\n\n\n////////////////////\n//################//\n//##            ##//\n//##  DHT22.ts  ##//\n//##            ##//\n//################//\n////////////////////\n\n/*\nThe DHT code is a refactory of an older version of the tinkertanker library:\nhttps://github.com/tinkertanker/pxt-iot-environment-kit/releases/tag/v5.2.7\n(MIT-license)\nNote that the latest release does not work\n*/\n\ntype TemperatureHumidity = number[]\n\nconst Temperature = 0\nconst Humidity = 1\n\nnamespace DHT22 {\n\n    export class Device {\n\n        pin: DigitalPin\n        th: TemperatureHumidity = [0, 0]\n        thvalid: boolean = true\n\n        constructor(pin: DigitalPin) {\n            this.pin = pin\n        }\n\n        waitPin(status: number, timeout: number): boolean {\n            timeout += control.millis()\n            while (control.millis() < timeout) {\n                if (pins.digitalReadPin(this.pin) == status)\n                    return true\n            }\n            return false\n        }\n\n        read(): TemperatureHumidity {\n            //initialize\n            let checksum: number = 0\n            let checksumTmp: number = 0\n            let dataArray: boolean[] = []\n            let resultArray: number[] = []\n            let temp = -999\n            let hum = -999\n\n            for (let index = 0; index < 40; index++) dataArray.push(false)\n            for (let index = 0; index < 5; index++) resultArray.push(0)\n\n            //request data\n            pins.digitalWritePin(this.pin, 0) //begin protocol, pull down pin\n            basic.pause(18)\n\n            pins.setPull(this.pin, PinPullMode.PullUp) //pull up data pin if needed\n            pins.digitalReadPin(this.pin) //pull up pin\n            control.waitMicros(40)\n\n            if (pins.digitalReadPin(this.pin) != 1) {\n                if (!this.waitPin(1, 100)) return this.th\n                if (!this.waitPin(0, 100)) return this.th\n                //read data (5 bytes)\n                for (let index = 0; index < 40; index++) {\n                    if (!this.waitPin(0, 100)) return this.th\n                    if (!this.waitPin(1, 100)) return this.th\n                    control.waitMicros(28)\n                    //if sensor still pull up data pin after 28 us it means 1, otherwise 0\n                    if (pins.digitalReadPin(this.pin) == 1) dataArray[index] = true\n                }\n\n                //convert byte number array to integer\n                for (let index = 0; index < 5; index++)\n                    for (let index2 = 0; index2 < 8; index2++)\n                        if (dataArray[8 * index + index2]) resultArray[index] += 2 ** (7 - index2)\n\n                //verify checksum\n                checksumTmp = resultArray[0] + resultArray[1] + resultArray[2] + resultArray[3]\n                checksum = resultArray[4]\n                if (checksumTmp >= 512) checksumTmp -= 512\n                if (checksumTmp >= 256) checksumTmp -= 256\n                if (checksum == checksumTmp) {\n                    let temp_sign: number = 1\n                    if (resultArray[2] >= 128) {\n                        resultArray[2] -= 128\n                        temp_sign = -1\n                    }\n                    hum = (resultArray[0] * 256 + resultArray[1]) / 10\n                    hum = Math.round(hum / 2)\n                    temp = (resultArray[2] * 256 + resultArray[3]) / 10 * temp_sign\n                    temp = Math.round(temp / 2)\n                }\n            }\n\n            if (temp == -999) {\n                this.thvalid = false\n                return this.th\n            }\n\n            this.th = [temp, hum]\n            this.thvalid = true\n\n            return this.th\n        }\n\n        valid(): boolean {\n            return this.thvalid\n        }\n    }\n\n    export function create(pin: DigitalPin): Device {\n        let device = new Device(pin)\n        return device\n    }\n}\n\n\n///////////////////////\n//###################//\n//##               ##//\n//##  ledstrip.ts  ##//\n//##               ##//\n//###################//\n///////////////////////\n\nenum LEDSixelMode {\n    GRB = 1,\n    RGBW = 2,\n    RGB = 3\n}\n\nnamespace Ledstrip {\n\n    export class Device {\n\n        pin: DigitalPin\n        mode: LEDSixelMode\n        buffer: Buffer\n        size: number\n        bright: number = 10\n\n        constructor(pin: DigitalPin, leds: number, mode: LEDSixelMode) {\n            this.pin = pin\n            this.mode = mode\n            this.size = leds * (mode == LEDSixelMode.RGBW ? 4 : 3)\n            this.buffer = pins.createBuffer(this.size)\n        }\n\n        show() {\n            light.sendWS2812Buffer(this.buffer, this.pin)\n        }\n\n        setPixelRGB(offset: number, red: number, green: number, blue: number, white: number = 0): void {\n            offset *= (this.mode == LEDSixelMode.RGBW ? 4 : 3)\n            switch (this.mode) {\n                case LEDSixelMode.GRB:\n                    this.buffer[offset + 0] = Math.floor(green * this.bright / 100)\n                    this.buffer[offset + 1] = Math.floor(red * this.bright / 100);\n                    this.buffer[offset + 2] = Math.floor(blue * this.bright / 100);\n                    break;\n                case LEDSixelMode.RGB:\n                    this.buffer[offset + 0] = Math.floor(red * this.bright / 100);\n                    this.buffer[offset + 1] = Math.floor(green * this.bright / 100);\n                    this.buffer[offset + 2] = Math.floor(blue * this.bright / 100);\n                    break;\n                case LEDSixelMode.RGBW:\n                    this.buffer[offset + 0] = Math.floor(red * this.bright / 100);\n                    this.buffer[offset + 1] = Math.floor(green * this.bright / 100);\n                    this.buffer[offset + 2] = Math.floor(blue * this.bright / 100);\n                    this.buffer[offset + 3] = Math.floor(white * this.bright / 100);\n                    break;\n            }\n        }\n\n        setPixelColor(pixel: number, color: Color, white: number = 0): void {\n            if (pixel < 0 || pixel >= 8)\n                return;\n            let rgb = fromColor(color)\n            let red = (rgb >> 16) & 0xFF;\n            let green = (rgb >> 8) & 0xFF;\n            let blue = (rgb) & 0xFF;\n            this.setPixelRGB(pixel, red, green, blue, white)\n        }\n\n        setRGB(red: number, green: number, blue: number, white: number = 0) {\n            for (let i = 0; i < 8; ++i)\n                this.setPixelRGB(i, red, green, blue, white)\n        }\n\n        setColor(color: Color, white: number = 0) {\n            let rgb = fromColor(color)\n            let red = (rgb >> 16) & 0xFF;\n            let green = (rgb >> 8) & 0xFF;\n            let blue = (rgb) & 0xFF;\n            for (let i = 0; i < 8; ++i)\n                this.setPixelRGB(i, red, green, blue, white)\n        }\n\n        setClear(): void {\n            this.buffer.fill(0, 0, this.size);\n        }\n\n        setBrightness(brightness: number) {\n            if (brightness < 0) brightness = 0\n            if (brightness > 100) brightness = 100\n            // small steps at low brightness and big steps at high brightness\n            brightness = (brightness ^ 2 / 100)\n            this.bright = brightness\n        }\n\n        setRotate(rotation: Rotate): void {\n            let offset = (this.mode == LEDSixelMode.RGBW ? 4 : 3)\n            if (rotation == Rotate.Clockwise)\n                this.buffer.rotate(-offset, 0, this.size)\n            else\n                this.buffer.rotate(offset, 0, this.size)\n        }\n\n        rainbow(rotation: Rotate, pace: Pace = Pace.Normal) {\n            if (rotation == Rotate.Clockwise) {\n                this.setPixelColor(0, Color.Red)\n                this.setPixelColor(1, Color.Orange)\n                this.setPixelColor(2, Color.Yellow)\n                this.setPixelColor(3, Color.Green)\n                this.setPixelColor(4, Color.Blue)\n                this.setPixelColor(5, Color.Indigo)\n                this.setPixelColor(6, Color.Violet)\n                this.setPixelColor(7, Color.Purple)\n            }\n            else {\n                this.setPixelColor(7, Color.Red)\n                this.setPixelColor(6, Color.Orange)\n                this.setPixelColor(5, Color.Yellow)\n                this.setPixelColor(4, Color.Green)\n                this.setPixelColor(3, Color.Blue)\n                this.setPixelColor(2, Color.Indigo)\n                this.setPixelColor(1, Color.Violet)\n                this.setPixelColor(0, Color.Purple)\n            }\n            this.show()\n            basic.pause(pace)\n            pace = (pace + 1) * 75\n            for (let i = 0; i < 7; i++) {\n                this.setRotate(rotation)\n                this.show()\n                basic.pause(pace)\n            }\n        }\n\n        snake(color: Color, rotation: Rotate, pace: Pace = Pace.Normal) {\n            let rgb = fromColor(color)\n            let red = (rgb >> 16) & 0xFF;\n            let green = (rgb >> 8) & 0xFF;\n            let blue = (rgb) & 0xFF;\n            this.setClear();\n            this.show()\n            pace = (pace + 1) * 75\n            for (let i = 7; i >= 0; i--) {\n                if (rotation == Rotate.Clockwise)\n                    this.setPixelRGB(7 - i, red, green, blue)\n                else\n                    this.setPixelRGB(i, red, green, blue)\n                this.show()\n                basic.pause(pace)\n            }\n            this.show()\n            for (let i = 6; i >= 0; i--) {\n                if (rotation == Rotate.Clockwise)\n                    this.setPixelRGB(7 - i, 0, 0, 0)\n                else\n                    this.setPixelRGB(i, 0, 0, 0)\n                this.show()\n                basic.pause(pace)\n            }\n            if (rotation == Rotate.Clockwise)\n                this.setPixelRGB(0, 0, 0, 0)\n            else\n                this.setPixelRGB(7, 0, 0, 0)\n            this.show()\n            basic.pause(pace)\n        }\n    }\n\n    export function create(pin: DigitalPin, leds: number, mode: LEDSixelMode = LEDSixelMode.GRB): Device {\n        let device = new Device(pin, leds, mode)\n        return device\n    }\n}\n\n\n///////////////////////\n//###################//\n//##               ##//\n//##  greenbox.ts  ##//\n//##               ##//\n//###################//\n///////////////////////\n\nlet SENDDASHBOARD = false\nbasic.showArrow(ArrowNames.West)\n\nenum Measurement {\n    //% block=\"temperature\"\n    //% block.loc.nl=\"temperatuur\"\n    Temperature = 0xFF0000,\n    //% block=\"humitidy\"\n    //% block.loc.nl=\"luchtvochtigheid\"\n    Humidity = 0xFFA500,\n    //% block=\"moisture\"\n    //% block.loc.nl=\"bodemvochtigheid\"\n    Moisture = 0xFFFF00,\n    //% block=\"illuminance\"\n    //% block.loc.nl=\"verlichting\"\n    Illuminance = 0x00FF00\n}\n\nrunHandler = () => {\n    SENDDASHBOARD = true\n    basic.showIcon(IconNames.Heart)\n}\n\nstopHandler = () => {\n    SENDDASHBOARD = false\n    basic.showArrow(ArrowNames.West)\n}\n\ndisplayHandler = () => {\n    SENDDASHBOARD = false\n    basic.showArrow(ArrowNames.West)\n}\n\n//% color=\"#00CC00\" icon=\"\\uf1f9\"\n//% block=\"Breeding box\"\n//% block.loc.nl=\"Kweekbakje\"\n//% groups=['•']\nnamespace GreenBox {\n\n    let PIN_SOIL = AnalogPin.P1\n    let PIN_LIGHT = AnalogPin.P2\n    let PIN_PUMP = DigitalPin.P16\n\n    let LEDS = Ledstrip.create(DigitalPin.P15, 8)\n    export let TEMPERATURE = DHT22.create(DigitalPin.P14)\n\n    export let ID: string = \"\"\n    export let APIKEY: string = \"\"\n    export let TEMPHUM: TemperatureHumidity = [0, 0]\n    export let PUMP: number = 0\n    export let MOISTURE: number = 0\n    export let LIGHT: number = 0\n\n    //% block=\"dashboard id is %id and api-key is %apikey\"\n    //% block.loc.nl=\"dashboard id is %id en api-key is %apikey\"\n    export function setDashboard(id: string, apikey: string) {\n        ERadio.setId(id)\n        APIKEY = apikey\n    }\n\n    //% block=\"send to the dashboard\"\n    //% block.loc.nl=\"verzend naar het dashboard\"\n    export function sendToDashboard() {\n        if (!SENDDASHBOARD) return\n        // route:\n        // this greenbox >> rpi/mbit with greenbox-iot >> thingspeak dashboard\n        basic.showIcon(IconNames.SmallHeart)\n        let dat = \"apikey=\" + GreenBox.APIKEY + \";\"\n        dat += \"field1=\" + GreenBox.MOISTURE + \";\"\n        dat += \"field2=\" + GreenBox.LIGHT + \";\"\n        dat += \"field3=\" + GreenBox.TEMPHUM[Humidity] + \";\"\n        dat += \"field4=\" + GreenBox.TEMPHUM[Temperature] + \";\"\n        dat += \"field5=\" + GreenBox.PUMP + \";\"\n        ERadio.writeMessage(dat)\n        basic.showIcon(IconNames.Heart)\n    }\n\n    //% block=\"display %value\"\n    //% block.loc.nl=\"toon %value\"\n    export function display(value: Measurement) {\n        let str = \"\"\n        switch (value) {\n            case Measurement.Temperature:\n                basic.showString(\"T\")\n                str = Math.round(TEMPHUM[Temperature]).toString() + \"C\"\n                break\n            case Measurement.Humidity:\n                basic.showString(\"R\")\n                str = Math.round(TEMPHUM[Humidity]).toString() + \"%\"\n                break\n            case Measurement.Moisture:\n                basic.showString(\"M\")\n                str = MOISTURE.toString() + \"%\"\n                break\n            case Measurement.Illuminance:\n                basic.showString(\"L\")\n                str = LIGHT.toString() + \"%\"\n                break\n        }\n        basic.pause(500)\n        basic.showString(\" \" + str)\n    }\n\n    //% block=\"perform a measurement\"\n    //% block.loc.nl=\"voer een meting uit\"\n    export function measure() {\n\n        TEMPHUM = TEMPERATURE.read() // hangs if not the first call of the routine\n\n        let voltL = pins.analogReadPin(PIN_LIGHT)\n        let valueL = pins.map(voltL, 0, 1023, 0, 100)\n        LIGHT = Math.round(valueL)\n\n        // the moisture sensor gives values from 136 to 236\n        // value 136 means fully soaken, 237 means fully dry\n        let voltS = pins.analogReadPin(PIN_SOIL)\n        if (voltS < 300) voltS = 300\n        if (voltS > 750) voltS = 750\n        let valueS = 100 - pins.map(voltS, 300, 750, 0, 100)\n        MOISTURE = Math.round(valueS)\n\n    }\n\n    //% block=\"turn the pump %state\"\n    //% block.loc.nl=\"schakel de pomp %state\"\n    export function pump(state: State) {\n        if (state == State.On) {\n            pins.digitalWritePin(PIN_PUMP, 1)\n            PUMP = 1\n        }\n        else {\n            pins.digitalWritePin(PIN_PUMP, 0)\n            PUMP = 0\n        }\n    }\n\n    //% block=\"set the light color to %color with brightness %brightness \\\\%\"\n    //% block.loc.nl=\"stel de lichtkleur in op %color met helderheid %brightness \\\\%\"\n    //% brightness.min=0 brightness.max=100 brightness.defl=100\n    export function setColor(color: Color, brightness: number) {\n        LEDS.setColor(color);\n        LEDS.setBrightness(brightness)\n        LEDS.show()\n    }\n\n    //% block=\"amount of illumination\"\n    //% block.loc.nl=\"hoeveelheid licht\"\n    export function illumination(): number {\n        return LIGHT\n    }\n\n    //% block=\"bone-dry\"\n    //% block.loc.nl=\"kurkdroog\"\n    //% group=\"•\"\n    export function moisture0(): number {\n        return 25\n    }\n\n    //% block=\"dry\"\n    //% block.loc.nl=\"droog\"\n    //% group=\"•\"\n    export function moisture1(): number {\n        return 50\n    }\n\n    //% block=\"moist\"\n    //% block.loc.nl=\"vochtig\"\n    //% group=\"•\"\n    export function moisture2(): number {\n        return 65\n    }\n\n    //% block=\"wet\"\n    //% block.loc.nl=\"nat\"\n    //% group=\"•\"\n    export function moisture3(): number {\n        return 80\n    }\n\n    //% block=\"soaking\"\n    //% block.loc.nl=\"doornat\"\n    //% group=\"•\"\n    export function moisture4(): number {\n        return 95\n    }\n\n    //% block=\"dark\"\n    //% block.loc.nl=\"donker\"\n    //% group=\"•\"\n    export function light0(): number {\n        return 25\n    }\n\n    //% block=\"dusk\"\n    //% block.loc.nl=\"schemer\"\n    //% group=\"•\"\n    export function light1(): number {\n        return 50\n    }\n\n    //% block=\"lucid\"\n    //% block.loc.nl=\"helder\"\n    //% group=\"•\"\n    export function light2(): number {\n        return 65\n    }\n\n    //% block=\"bright\"\n    //% block.loc.nl=\"fel\"\n    //% group=\"•\"\n    export function light3(): number {\n        return 80\n    }\n\n    //% block=\"off\"\n    //% block.loc.nl=\"uit\"\n    //% group=\"•\"\n    export function off(): number {\n        return 0\n    }\n\n    //% block=\"on\"\n    //% block.loc.nl=\"aan\"\n    //% group=\"•\"\n    export function on(): number {\n        return 100\n    }\n\n    //% block=\"moisture\"\n    //% block.loc.nl=\"grondvochtigheid\"\n    export function moisture(): number {\n        return MOISTURE\n    }\n\n    //% block=\"humidity\"\n    //% block.loc.nl=\"luchtvochtigheid\"\n    export function humidity(): number {\n        return TEMPHUM[Humidity]\n    }\n\n    //% block=\"temperature\"\n    //% block.loc.nl=\"temperatuur\"\n    export function temperature(): number {\n        return TEMPHUM[Temperature]\n    }\n}\n\n///////////////////////////////\n\n//let TH = DHT22.create(DigitalPin.P14)\nlet th: TemperatureHumidity\n\nbasic.forever(function() {\n    th = GreenBox.TEMPERATURE.read()\n    basic.showNumber(th[Temperature])\n})\n\n/*\nbasic.forever(function() {\n    GreenBox.measure()\n    GreenBox.display(Measurement.Temperature)\n    basic.showIcon(IconNames.Confused)\n    General.wait(5)\n})\n*/","README.md":"","pxt.json":"{\n    \"name\": \"greenbox\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"general\": \"github:etmbit/general#4ea1e3f3224a0692900d0a9e2898a515af73c9a0\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1761332194821,"editorVersion":"8.0.17","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block><block type=\"device_forever\" x=\"225\" y=\"20\"></block></xml>","main.ts":"/////////////////////\n//#################//\n//##             ##//\n//##  eradio.ts  ##//\n//##             ##//\n//#################//\n/////////////////////\n\nlet RADIOID = \"ID\"\nlet MSGEND = \"#EOM#\"\nlet bsyids: string[] = []\nlet rdymsgs: string[] = []\nlet bsymsgs: string[] = []\n\ntype readhandler = () => void\nlet readHandler: readhandler\n\nradio.onReceivedString(function (msg: string) {\n    // mbit radio buffer size is 19\n    // msg format:\n    // -----------\n    // char 0 :             id length\n    // char 1..n :          id\n    // char (18 - n)..19 :  msg chunk \n\n    let idlen: number = +msg.substr(0, 1)\n    msg = msg.substr(1)\n    let id = msg.substr(0, idlen)\n    msg = msg.substr(idlen)\n    let ix = 0\n    for (; ix < bsyids.length; ix++) {\n        if (id == bsyids[ix]) break\n    }\n    if (ix == bsyids.length) {\n        bsyids.push(id)\n        bsymsgs.push(\"\") // is handled at the end by 'bsymsgs[ix] += msg'\n    }\n    if (msg == MSGEND) { // end of message\n        rdymsgs.push(bsymsgs[ix])\n        bsymsgs.removeAt(ix)\n        bsyids.removeAt(ix)\n        if (readHandler) readHandler()\n        return\n    }\n    bsymsgs[ix] += msg\n})\n\nnamespace ERadio {\n\n    export function readMessage(): string {\n        let msg = rdymsgs.shift()\n        return msg\n    }\n\n    export function writeMessage(msg: string) {\n        // mbit radio buffer size is 19\n        // chunk format:\n        // -------------\n        // char 0 :             id length\n        // char 1..n :          id\n        // char (18 - n)..19 :  msg chunk \n\n        let idlen = RADIOID.length\n        let chunk: string\n        let chunklen = 18 - idlen // 19 is mbit radio buffer size\n        do {\n            chunk = msg.substr(0, chunklen)\n            msg = msg.substr(chunklen)\n            radio.sendString(idlen.toString() + RADIOID + chunk)\n            basic.pause(1)\n        } while (msg.length > 0)\n        radio.sendString(idlen.toString() + RADIOID + MSGEND)\n    }\n\n    // for senders only\n    export function setId(id: string) {\n        RADIOID = id\n    }\n}\n\n\n////////////////////\n//################//\n//##            ##//\n//##  DHT22.ts  ##//\n//##            ##//\n//################//\n////////////////////\n\n/*\nThe DHT code is a refactory of an older version of the tinkertanker library:\nhttps://github.com/tinkertanker/pxt-iot-environment-kit/releases/tag/v5.2.7\n(MIT-license)\nNote that the latest release does not work\n*/\n\ntype TemperatureHumidity = number[]\n\nconst Temperature = 0\nconst Humidity = 1\n\nnamespace DHT22 {\n\n    export class Device {\n\n        pin: DigitalPin\n        th: TemperatureHumidity = [0, 0]\n        thvalid: boolean = true\n\n        constructor(pin: DigitalPin) {\n            this.pin = pin\n        }\n\n        waitPin(status: number, timeout: number): boolean {\n            timeout += control.millis()\n            while (control.millis() < timeout) {\n                if (pins.digitalReadPin(this.pin) == status)\n                    return true\n            }\n            return false\n        }\n\n        read(): TemperatureHumidity {\n            //initialize\n            let checksum: number = 0\n            let checksumTmp: number = 0\n            let dataArray: boolean[] = []\n            let resultArray: number[] = []\n            let temp = -999\n            let hum = -999\n\n            for (let index = 0; index < 40; index++) dataArray.push(false)\n            for (let index = 0; index < 5; index++) resultArray.push(0)\n\n            //request data\n            pins.digitalWritePin(this.pin, 0) //begin protocol, pull down pin\n            control.waitMicros(20000)\n\n            pins.setPull(this.pin, PinPullMode.PullUp) //pull up data pin if needed\n            pins.digitalReadPin(this.pin) //pull up pin\n            control.waitMicros(40)\n\n            if (pins.digitalReadPin(this.pin) != 1) {\n                if (!this.waitPin(1, 100)) return this.th\n                if (!this.waitPin(0, 100)) return this.th\n                //read data (5 bytes)\n                for (let index = 0; index < 40; index++) {\n                    if (!this.waitPin(0, 100)) return this.th\n                    if (!this.waitPin(1, 100)) return this.th\n                    control.waitMicros(28)\n                    //if sensor still pull up data pin after 28 us it means 1, otherwise 0\n                    if (pins.digitalReadPin(this.pin) == 1) dataArray[index] = true\n                }\n\n                //convert byte number array to integer\n                for (let index = 0; index < 5; index++)\n                    for (let index2 = 0; index2 < 8; index2++)\n                        if (dataArray[8 * index + index2]) resultArray[index] += 2 ** (7 - index2)\n\n                //verify checksum\n                checksumTmp = resultArray[0] + resultArray[1] + resultArray[2] + resultArray[3]\n                checksum = resultArray[4]\n                if (checksumTmp >= 512) checksumTmp -= 512\n                if (checksumTmp >= 256) checksumTmp -= 256\n                if (checksum == checksumTmp) {\n                    let temp_sign: number = 1\n                    if (resultArray[2] >= 128) {\n                        resultArray[2] -= 128\n                        temp_sign = -1\n                    }\n                    hum = (resultArray[0] * 256 + resultArray[1]) / 10\n                    hum = Math.round(hum / 2)\n                    temp = (resultArray[2] * 256 + resultArray[3]) / 10 * temp_sign\n                    temp = Math.round(temp / 2)\n                }\n            }\n\n            if (temp == -999) {\n                this.thvalid = false\n                return this.th\n            }\n\n            this.th = [temp, hum]\n            this.thvalid = true\n\n            return this.th\n        }\n\n        valid(): boolean {\n            return this.thvalid\n        }\n    }\n\n    export function create(pin: DigitalPin): Device {\n        let device = new Device(pin)\n        return device\n    }\n}\n\n\n///////////////////////\n//###################//\n//##               ##//\n//##  ledstrip.ts  ##//\n//##               ##//\n//###################//\n///////////////////////\n\nenum LEDSixelMode {\n    GRB = 1,\n    RGBW = 2,\n    RGB = 3\n}\n\nnamespace Ledstrip {\n\n    export class Device {\n\n        pin: DigitalPin\n        mode: LEDSixelMode\n        buffer: Buffer\n        size: number\n        bright: number = 10\n\n        constructor(pin: DigitalPin, leds: number, mode: LEDSixelMode) {\n            this.pin = pin\n            this.mode = mode\n            this.size = leds * (mode == LEDSixelMode.RGBW ? 4 : 3)\n            this.buffer = pins.createBuffer(this.size)\n        }\n\n        show() {\n            light.sendWS2812Buffer(this.buffer, this.pin)\n        }\n\n        setPixelRGB(offset: number, red: number, green: number, blue: number, white: number = 0): void {\n            offset *= (this.mode == LEDSixelMode.RGBW ? 4 : 3)\n            switch (this.mode) {\n                case LEDSixelMode.GRB:\n                    this.buffer[offset + 0] = Math.floor(green * this.bright / 100)\n                    this.buffer[offset + 1] = Math.floor(red * this.bright / 100);\n                    this.buffer[offset + 2] = Math.floor(blue * this.bright / 100);\n                    break;\n                case LEDSixelMode.RGB:\n                    this.buffer[offset + 0] = Math.floor(red * this.bright / 100);\n                    this.buffer[offset + 1] = Math.floor(green * this.bright / 100);\n                    this.buffer[offset + 2] = Math.floor(blue * this.bright / 100);\n                    break;\n                case LEDSixelMode.RGBW:\n                    this.buffer[offset + 0] = Math.floor(red * this.bright / 100);\n                    this.buffer[offset + 1] = Math.floor(green * this.bright / 100);\n                    this.buffer[offset + 2] = Math.floor(blue * this.bright / 100);\n                    this.buffer[offset + 3] = Math.floor(white * this.bright / 100);\n                    break;\n            }\n        }\n\n        setPixelColor(pixel: number, color: Color, white: number = 0): void {\n            if (pixel < 0 || pixel >= 8)\n                return;\n            let rgb = fromColor(color)\n            let red = (rgb >> 16) & 0xFF;\n            let green = (rgb >> 8) & 0xFF;\n            let blue = (rgb) & 0xFF;\n            this.setPixelRGB(pixel, red, green, blue, white)\n        }\n\n        setRGB(red: number, green: number, blue: number, white: number = 0) {\n            for (let i = 0; i < 8; ++i)\n                this.setPixelRGB(i, red, green, blue, white)\n        }\n\n        setColor(color: Color, white: number = 0) {\n            let rgb = fromColor(color)\n            let red = (rgb >> 16) & 0xFF;\n            let green = (rgb >> 8) & 0xFF;\n            let blue = (rgb) & 0xFF;\n            for (let i = 0; i < 8; ++i)\n                this.setPixelRGB(i, red, green, blue, white)\n        }\n\n        setClear(): void {\n            this.buffer.fill(0, 0, this.size);\n        }\n\n        setBrightness(brightness: number) {\n            if (brightness < 0) brightness = 0\n            if (brightness > 100) brightness = 100\n            // small steps at low brightness and big steps at high brightness\n            brightness = (brightness ^ 2 / 100)\n            this.bright = brightness\n        }\n\n        setRotate(rotation: Rotate): void {\n            let offset = (this.mode == LEDSixelMode.RGBW ? 4 : 3)\n            if (rotation == Rotate.Clockwise)\n                this.buffer.rotate(-offset, 0, this.size)\n            else\n                this.buffer.rotate(offset, 0, this.size)\n        }\n\n        rainbow(rotation: Rotate, pace: Pace = Pace.Normal) {\n            if (rotation == Rotate.Clockwise) {\n                this.setPixelColor(0, Color.Red)\n                this.setPixelColor(1, Color.Orange)\n                this.setPixelColor(2, Color.Yellow)\n                this.setPixelColor(3, Color.Green)\n                this.setPixelColor(4, Color.Blue)\n                this.setPixelColor(5, Color.Indigo)\n                this.setPixelColor(6, Color.Violet)\n                this.setPixelColor(7, Color.Purple)\n            }\n            else {\n                this.setPixelColor(7, Color.Red)\n                this.setPixelColor(6, Color.Orange)\n                this.setPixelColor(5, Color.Yellow)\n                this.setPixelColor(4, Color.Green)\n                this.setPixelColor(3, Color.Blue)\n                this.setPixelColor(2, Color.Indigo)\n                this.setPixelColor(1, Color.Violet)\n                this.setPixelColor(0, Color.Purple)\n            }\n            this.show()\n            basic.pause(pace)\n            pace = (pace + 1) * 75\n            for (let i = 0; i < 7; i++) {\n                this.setRotate(rotation)\n                this.show()\n                basic.pause(pace)\n            }\n        }\n\n        snake(color: Color, rotation: Rotate, pace: Pace = Pace.Normal) {\n            let rgb = fromColor(color)\n            let red = (rgb >> 16) & 0xFF;\n            let green = (rgb >> 8) & 0xFF;\n            let blue = (rgb) & 0xFF;\n            this.setClear();\n            this.show()\n            pace = (pace + 1) * 75\n            for (let i = 7; i >= 0; i--) {\n                if (rotation == Rotate.Clockwise)\n                    this.setPixelRGB(7 - i, red, green, blue)\n                else\n                    this.setPixelRGB(i, red, green, blue)\n                this.show()\n                basic.pause(pace)\n            }\n            this.show()\n            for (let i = 6; i >= 0; i--) {\n                if (rotation == Rotate.Clockwise)\n                    this.setPixelRGB(7 - i, 0, 0, 0)\n                else\n                    this.setPixelRGB(i, 0, 0, 0)\n                this.show()\n                basic.pause(pace)\n            }\n            if (rotation == Rotate.Clockwise)\n                this.setPixelRGB(0, 0, 0, 0)\n            else\n                this.setPixelRGB(7, 0, 0, 0)\n            this.show()\n            basic.pause(pace)\n        }\n    }\n\n    export function create(pin: DigitalPin, leds: number, mode: LEDSixelMode = LEDSixelMode.GRB): Device {\n        let device = new Device(pin, leds, mode)\n        return device\n    }\n}\n\n\n///////////////////////\n//###################//\n//##               ##//\n//##  greenbox.ts  ##//\n//##               ##//\n//###################//\n///////////////////////\n\nlet SENDDASHBOARD = false\nbasic.showArrow(ArrowNames.West)\n\nenum Measurement {\n    //% block=\"temperature\"\n    //% block.loc.nl=\"temperatuur\"\n    Temperature = 0xFF0000,\n    //% block=\"humitidy\"\n    //% block.loc.nl=\"luchtvochtigheid\"\n    Humidity = 0xFFA500,\n    //% block=\"moisture\"\n    //% block.loc.nl=\"bodemvochtigheid\"\n    Moisture = 0xFFFF00,\n    //% block=\"illuminance\"\n    //% block.loc.nl=\"verlichting\"\n    Illuminance = 0x00FF00\n}\n\nrunHandler = () => {\n    SENDDASHBOARD = true\n    basic.showIcon(IconNames.Heart)\n}\n\nstopHandler = () => {\n    SENDDASHBOARD = false\n    basic.showArrow(ArrowNames.West)\n}\n\ndisplayHandler = () => {\n    SENDDASHBOARD = false\n    basic.showArrow(ArrowNames.West)\n}\n\n//% color=\"#00CC00\" icon=\"\\uf1f9\"\n//% block=\"Breeding box\"\n//% block.loc.nl=\"Kweekbakje\"\n//% groups=['•']\nnamespace GreenBox {\n\n    let PIN_SOIL = AnalogPin.P1\n    let PIN_LIGHT = AnalogPin.P2\n    let PIN_PUMP = DigitalPin.P16\n\n    let LEDS = Ledstrip.create(DigitalPin.P15, 8)\n    export let TEMPERATURE = DHT22.create(DigitalPin.P14)\n\n    export let ID: string = \"\"\n    export let APIKEY: string = \"\"\n    export let TEMPHUM: TemperatureHumidity = [0, 0]\n    export let PUMP: number = 0\n    export let MOISTURE: number = 0\n    export let LIGHT: number = 0\n\n    //% block=\"dashboard id is %id and api-key is %apikey\"\n    //% block.loc.nl=\"dashboard id is %id en api-key is %apikey\"\n    export function setDashboard(id: string, apikey: string) {\n        ERadio.setId(id)\n        APIKEY = apikey\n    }\n\n    //% block=\"send to the dashboard\"\n    //% block.loc.nl=\"verzend naar het dashboard\"\n    export function sendToDashboard() {\n        if (!SENDDASHBOARD) return\n        // route:\n        // this greenbox >> rpi/mbit with greenbox-iot >> thingspeak dashboard\n        basic.showIcon(IconNames.SmallHeart)\n        let dat = \"apikey=\" + GreenBox.APIKEY + \";\"\n        dat += \"field1=\" + GreenBox.MOISTURE + \";\"\n        dat += \"field2=\" + GreenBox.LIGHT + \";\"\n        dat += \"field3=\" + GreenBox.TEMPHUM[Humidity] + \";\"\n        dat += \"field4=\" + GreenBox.TEMPHUM[Temperature] + \";\"\n        dat += \"field5=\" + GreenBox.PUMP + \";\"\n        ERadio.writeMessage(dat)\n        basic.showIcon(IconNames.Heart)\n    }\n\n    //% block=\"display %value\"\n    //% block.loc.nl=\"toon %value\"\n    export function display(value: Measurement) {\n        let str = \"\"\n        switch (value) {\n            case Measurement.Temperature:\n                basic.showString(\"T\")\n                str = Math.round(TEMPHUM[Temperature]).toString() + \"C\"\n                break\n            case Measurement.Humidity:\n                basic.showString(\"R\")\n                str = Math.round(TEMPHUM[Humidity]).toString() + \"%\"\n                break\n            case Measurement.Moisture:\n                basic.showString(\"M\")\n                str = MOISTURE.toString() + \"%\"\n                break\n            case Measurement.Illuminance:\n                basic.showString(\"L\")\n                str = LIGHT.toString() + \"%\"\n                break\n        }\n        basic.pause(500)\n        basic.showString(\" \" + str)\n    }\n\n    //% block=\"perform a measurement\"\n    //% block.loc.nl=\"voer een meting uit\"\n    export function measure() {\n\n        TEMPHUM = TEMPERATURE.read() // hangs if not the first call of the routine\n\n        let voltL = pins.analogReadPin(PIN_LIGHT)\n        let valueL = pins.map(voltL, 0, 1023, 0, 100)\n        LIGHT = Math.round(valueL)\n\n        // the moisture sensor gives values from 136 to 236\n        // value 136 means fully soaken, 237 means fully dry\n        let voltS = pins.analogReadPin(PIN_SOIL)\n        if (voltS < 300) voltS = 300\n        if (voltS > 750) voltS = 750\n        let valueS = 100 - pins.map(voltS, 300, 750, 0, 100)\n        MOISTURE = Math.round(valueS)\n\n    }\n\n    //% block=\"turn the pump %state\"\n    //% block.loc.nl=\"schakel de pomp %state\"\n    export function pump(state: State) {\n        if (state == State.On) {\n            pins.digitalWritePin(PIN_PUMP, 1)\n            PUMP = 1\n        }\n        else {\n            pins.digitalWritePin(PIN_PUMP, 0)\n            PUMP = 0\n        }\n    }\n\n    //% block=\"set the light color to %color with brightness %brightness \\\\%\"\n    //% block.loc.nl=\"stel de lichtkleur in op %color met helderheid %brightness \\\\%\"\n    //% brightness.min=0 brightness.max=100 brightness.defl=100\n    export function setColor(color: Color, brightness: number) {\n        LEDS.setColor(color);\n        LEDS.setBrightness(brightness)\n        LEDS.show()\n    }\n\n    //% block=\"amount of illumination\"\n    //% block.loc.nl=\"hoeveelheid licht\"\n    export function illumination(): number {\n        return LIGHT\n    }\n\n    //% block=\"bone-dry\"\n    //% block.loc.nl=\"kurkdroog\"\n    //% group=\"•\"\n    export function moisture0(): number {\n        return 25\n    }\n\n    //% block=\"dry\"\n    //% block.loc.nl=\"droog\"\n    //% group=\"•\"\n    export function moisture1(): number {\n        return 50\n    }\n\n    //% block=\"moist\"\n    //% block.loc.nl=\"vochtig\"\n    //% group=\"•\"\n    export function moisture2(): number {\n        return 65\n    }\n\n    //% block=\"wet\"\n    //% block.loc.nl=\"nat\"\n    //% group=\"•\"\n    export function moisture3(): number {\n        return 80\n    }\n\n    //% block=\"soaking\"\n    //% block.loc.nl=\"doornat\"\n    //% group=\"•\"\n    export function moisture4(): number {\n        return 95\n    }\n\n    //% block=\"dark\"\n    //% block.loc.nl=\"donker\"\n    //% group=\"•\"\n    export function light0(): number {\n        return 25\n    }\n\n    //% block=\"dusk\"\n    //% block.loc.nl=\"schemer\"\n    //% group=\"•\"\n    export function light1(): number {\n        return 50\n    }\n\n    //% block=\"lucid\"\n    //% block.loc.nl=\"helder\"\n    //% group=\"•\"\n    export function light2(): number {\n        return 65\n    }\n\n    //% block=\"bright\"\n    //% block.loc.nl=\"fel\"\n    //% group=\"•\"\n    export function light3(): number {\n        return 80\n    }\n\n    //% block=\"off\"\n    //% block.loc.nl=\"uit\"\n    //% group=\"•\"\n    export function off(): number {\n        return 0\n    }\n\n    //% block=\"on\"\n    //% block.loc.nl=\"aan\"\n    //% group=\"•\"\n    export function on(): number {\n        return 100\n    }\n\n    //% block=\"moisture\"\n    //% block.loc.nl=\"grondvochtigheid\"\n    export function moisture(): number {\n        return MOISTURE\n    }\n\n    //% block=\"humidity\"\n    //% block.loc.nl=\"luchtvochtigheid\"\n    export function humidity(): number {\n        return TEMPHUM[Humidity]\n    }\n\n    //% block=\"temperature\"\n    //% block.loc.nl=\"temperatuur\"\n    export function temperature(): number {\n        return TEMPHUM[Temperature]\n    }\n}\n\n///////////////////////////////\n\nlet th: TemperatureHumidity\n\n/*\nbasic.forever(function() {\n    GreenBox.measure()\n    basic.showIcon(IconNames.Confused)\n    General.wait(5)\n    GreenBox.display(Measurement.Temperature)\n\n})\n*/\n","README.md":"","pxt.json":"{\n    \"name\": \"greenbox\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"general\": \"github:etmbit/general#4ea1e3f3224a0692900d0a9e2898a515af73c9a0\",\n        \"timing\": \"github:etmbit/timing#fc27a447ed1c0b8e0bbc97d0041471705233ad7d\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}}],"shares":[],"lastSaveTime":1761332953516}